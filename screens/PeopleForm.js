// import react and the component components from react
import React, {Component} from "react";

// import specific components from react native 
import {SafeAreaView, ScrollView, StyleSheet} from "react-native";

// import custom components from component folder 
import AvatarContainer from "../components/AvatarContainer"
import SubmitButton from "../components/SubmitButton";
import WordInput from "../components/WordInput"; 

// imported expo module that selects images & vids from the phone's library or camera
import * as ImagePicker from "expo-image-picker";

// imported  expo module that ask permission from user; required for image-picker
import * as Permissions from "expo-permissions";

// import firebase credentials
import firebase from "../firebase"; 



/* PEOPLE FORM  */ 
export default class PeopleForm extends Component {

    // set reference to firebase database
    db = firebase.database();

    // initial states and bind functions
    constructor(props) {
      super(props); 
      this.state = {
        firstName: "",
        relationship: "", 
        avatar: null
      }
      this.addPerson = this.addPerson.bind(this); 
    }

    // created function that takes data and adds person  to dataase
    async addPerson(firstName, relationship, avatar) {

      // if either name or relationship input was not entered
      if (!firstName || !relationship) {

        // display alert
        alert("Missing information: Please enter fields");

      } else {

        // created a variable 
        let remoteUri = null;

        try {

          // push data to the database
          newUserRef = this.db.ref().child("people").push({
            personName: firstName,
            personRelation: relationship, 
            avatar: avatar, 
          });      


          // get unique ID generated by push
          const userID = newUserRef.getKey(); 

          // if the user uploads an image, execute upload 
          // then set it to the newly generated user
          if (avatar) {
              remoteUri = await this.uploadPhotoAsync(avatar, `avatars/${userID}`);
              db.ref("people").child(userID).set({ avatar: remoteUri });
          }

        // if there is an error, print error
        } catch (error) {
          console.log("Error: " + error);

        // regardless of error or upload ...
        } finally {

          // clear the state 
          this.setState({ 
            firstName: "", 
            relationship: "",
            avatar: ""
          });

          // close this active screen and move back in the stack
          this.props.navigation.goBack();

        } 

      }

    }

    // function for uploading photo
    uploadPhotoAsync = (uri, filename) => {

      // return an async promise
      return new Promise(async (res, rej) => {

        // created varaible to fetch the uri and the image
        const response = await fetch(uri);
        const file = await response.blob();

        // created variable that pushes file to the firesbase storage
        let upload = firebase
          .storage()
          .ref(filename)
          .put(file);

        // read and retrieve url asynchronously or return error 
        upload.on(
          "state_changed",
          snapshot => {},
          err => {
            rej(err);
          },
          async () => {
            const url = await upload.snapshot.ref.getDownloadURL();
            res(url);
          }

        );

      });

    };

    // created an async function for picking vatar
    handlePickAvatar = async () => {

      // created an async function for asking camera permission
      getCameraPermission = async () => {

        // if the device is an IOS
        if (Constants.platform.ios) {

          // prompt the user for camera & vid permission 
          const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);

          // send an alert message if the user says no
          if (status != "granted") {
            alert("We need permission to use your camera roll if you'd like to incude a photo.");
          }
        }
      };        

      // created a varaible that holds the selected image by the user
      // and alows editing abilities i.e. cropping
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 3]
      });

      // if the user allow camera permission
      // set the avatar to the selected image
      if (!result.cancelled) {
        this.setState({ 
          avatar: result.uri 
        });
      }
    };    

  render() {

    // return the following...
    return (

      <SafeAreaView style={style.container}>
        <ScrollView style={style.formContent}>

          <AvatarContainer
            onPressFunction={this.handlePickAvatar}
            imageSource={{uri: this.state.avatar}}
          />

          <WordInput
            marginTopNeeded={{}}
            inputTitle={"First Name"}
            onChangeTextFunction={firstName => this.setState({firstName})}
            inputValue={this.state.firstName}
          />   

          <WordInput
            marginTopNeeded={{ marginTop: 32 }}
            inputTitle={"Relationship"}
            onChangeTextFunction={relationship => this.setState({relationship})}
            inputValue={this.state.relationship}
          />           

          <SubmitButton 
            onPressFunction={
              () => this.addPerson(
                this.state.firstName, 
                this.state.relationship, 
                this.state.avatar
              )
            }
          />          

        </ScrollView>
      </SafeAreaView>

    );
  }
}

/* STYLESHEET */ 
const style = StyleSheet.create({

  // container of whole page
  container: {
    flex: 1, 
  }, 

  formContent: {
    padding: 20
  }

});